security:
  password_hashers:
    App\Entity\User:
      algorithm: auto
      migrate_from:
        - 'auto'
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    public_wishlist:
      request_matcher: App\Security\RequestMatcher\PublicWishlistMatcher
      stateless: true

    api:
      pattern: ^/
      stateless: true
      provider: app_user_provider
      entry_point: jwt

      json_login:
        check_path: /account/login
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

      refresh_jwt:
        check_path: /account/token/refresh

      jwt: ~

  access_control:
    # Preflight always allowed
    - { path: ^/, roles: PUBLIC_ACCESS, methods: [ OPTIONS ] }
    # Development
    - { path: ^/_profiler, roles: PUBLIC_ACCESS }
    - { path: ^/_wdt, roles: PUBLIC_ACCESS }
    # Public without a token
    - { path: ^/account/login$, roles: PUBLIC_ACCESS }
    - { path: ^/account/token/refresh$, roles: PUBLIC_ACCESS }
    - { path: ^/account/register$, roles: PUBLIC_ACCESS }
    - { path: ^/account/password_reset, roles: PUBLIC_ACCESS }
    - { path: ^/account/docs$, roles: PUBLIC_ACCESS }
    - { path: ^/account/doc\.json$, roles: PUBLIC_ACCESS }
    - { path: ^/wishlists$, methods: [ GET, OPTIONS ], roles: PUBLIC_ACCESS }
    # Authorized access
    - { path: ^/wishlists, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
